// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyMvcNetCore.DataLayer.Context;

#nullable disable

namespace MyMvcNetCore.DataLayer.Migrations
{
    [DbContext(typeof(MyMvcNetCoreDbContext))]
    partial class MyMvcNetCoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyMvcNetCore.Entities.Cart", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Clothing"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Books"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Home & Kitchen"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Sports & Outdoors"
                        },
                        new
                        {
                            Id = 6,
                            Title = "Beauty & Health"
                        },
                        new
                        {
                            Id = 7,
                            Title = "Toys & Games"
                        },
                        new
                        {
                            Id = 8,
                            Title = "Automotive"
                        },
                        new
                        {
                            Id = 9,
                            Title = "Pet Supplies"
                        },
                        new
                        {
                            Id = 10,
                            Title = "Office Products"
                        },
                        new
                        {
                            Id = 11,
                            ParentId = 1,
                            Title = "Mobile Phones"
                        },
                        new
                        {
                            Id = 12,
                            ParentId = 1,
                            Title = "Laptops"
                        },
                        new
                        {
                            Id = 13,
                            ParentId = 1,
                            Title = "Headphones"
                        },
                        new
                        {
                            Id = 14,
                            ParentId = 1,
                            Title = "Cameras"
                        },
                        new
                        {
                            Id = 15,
                            ParentId = 1,
                            Title = "Televisions"
                        },
                        new
                        {
                            Id = 16,
                            ParentId = 2,
                            Title = "Men's Clothing"
                        },
                        new
                        {
                            Id = 17,
                            ParentId = 2,
                            Title = "Women's Clothing"
                        },
                        new
                        {
                            Id = 18,
                            ParentId = 2,
                            Title = "Kids' Clothing"
                        },
                        new
                        {
                            Id = 19,
                            ParentId = 2,
                            Title = "Shoes"
                        },
                        new
                        {
                            Id = 20,
                            ParentId = 2,
                            Title = "Accessories"
                        },
                        new
                        {
                            Id = 21,
                            ParentId = 3,
                            Title = "Fiction"
                        },
                        new
                        {
                            Id = 22,
                            ParentId = 3,
                            Title = "Non-Fiction"
                        },
                        new
                        {
                            Id = 23,
                            ParentId = 3,
                            Title = "Comics"
                        },
                        new
                        {
                            Id = 24,
                            ParentId = 3,
                            Title = "Children's Books"
                        },
                        new
                        {
                            Id = 25,
                            ParentId = 3,
                            Title = "Science & Technology"
                        },
                        new
                        {
                            Id = 26,
                            ParentId = 4,
                            Title = "Furniture"
                        },
                        new
                        {
                            Id = 27,
                            ParentId = 4,
                            Title = "Appliances"
                        },
                        new
                        {
                            Id = 28,
                            ParentId = 4,
                            Title = "Kitchen Tools"
                        },
                        new
                        {
                            Id = 29,
                            ParentId = 4,
                            Title = "Bedding"
                        },
                        new
                        {
                            Id = 30,
                            ParentId = 4,
                            Title = "Home Decor"
                        },
                        new
                        {
                            Id = 31,
                            ParentId = 5,
                            Title = "Fitness Equipment"
                        },
                        new
                        {
                            Id = 32,
                            ParentId = 5,
                            Title = "Outdoor Gear"
                        },
                        new
                        {
                            Id = 33,
                            ParentId = 5,
                            Title = "Team Sports"
                        },
                        new
                        {
                            Id = 34,
                            ParentId = 5,
                            Title = "Cycling"
                        },
                        new
                        {
                            Id = 35,
                            ParentId = 6,
                            Title = "Skincare"
                        },
                        new
                        {
                            Id = 36,
                            ParentId = 6,
                            Title = "Makeup"
                        },
                        new
                        {
                            Id = 37,
                            ParentId = 6,
                            Title = "Personal Care"
                        },
                        new
                        {
                            Id = 38,
                            ParentId = 6,
                            Title = "Healthcare"
                        },
                        new
                        {
                            Id = 39,
                            ParentId = 7,
                            Title = "Action Figures"
                        },
                        new
                        {
                            Id = 40,
                            ParentId = 7,
                            Title = "Board Games"
                        },
                        new
                        {
                            Id = 41,
                            ParentId = 7,
                            Title = "Puzzles"
                        },
                        new
                        {
                            Id = 42,
                            ParentId = 7,
                            Title = "Dolls"
                        },
                        new
                        {
                            Id = 43,
                            ParentId = 8,
                            Title = "Car Accessories"
                        },
                        new
                        {
                            Id = 44,
                            ParentId = 8,
                            Title = "Motorbike Accessories"
                        },
                        new
                        {
                            Id = 45,
                            ParentId = 8,
                            Title = "Car Electronics"
                        },
                        new
                        {
                            Id = 46,
                            ParentId = 9,
                            Title = "Dog Supplies"
                        },
                        new
                        {
                            Id = 47,
                            ParentId = 9,
                            Title = "Cat Supplies"
                        },
                        new
                        {
                            Id = 48,
                            ParentId = 9,
                            Title = "Aquatic Supplies"
                        },
                        new
                        {
                            Id = 49,
                            ParentId = 10,
                            Title = "Office Furniture"
                        },
                        new
                        {
                            Id = 50,
                            ParentId = 10,
                            Title = "Writing Supplies"
                        },
                        new
                        {
                            Id = 51,
                            ParentId = 10,
                            Title = "Office Electronics"
                        },
                        new
                        {
                            Id = 52,
                            ParentId = 10,
                            Title = "Paper Products"
                        });
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Identity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("ApplicationRole", (string)null);
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationRoleClaim", (string)null);
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("ApplicationUser", (string)null);
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUserClaim", (string)null);
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUserLogin", (string)null);
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Identity.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationUserRole", (string)null);
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Identity.ApplicationUserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("ApplicationUserToken", (string)null);
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Carrier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentDueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.OrderDetail", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 11,
                            Description = "The latest flagship smartphone from Samsung, featuring a built-in S Pen and a powerful 108MP camera system.",
                            Price = 1200,
                            Title = "Samsung Galaxy S23 Ultra"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 12,
                            Description = "An ultra-lightweight laptop with Apple's M2 chip, offering unparalleled performance and a stunning Liquid Retina display.",
                            Price = 1300,
                            Title = "Apple MacBook Air M2"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 13,
                            Description = "Industry-leading wireless headphones with superior noise-cancellation technology and exceptional audio quality.",
                            Price = 350,
                            Title = "Sony WH-1000XM5"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 14,
                            Description = "A full-frame mirrorless camera capable of capturing stunning 45MP photos and 8K video, with a lightning-fast autofocus system.",
                            Price = 3899,
                            Title = "Canon EOS R5"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 15,
                            Description = "A 4K OLED television with perfect blacks and vibrant colors, powered by the α9 Gen 5 AI Processor for a truly cinematic experience.",
                            Price = 1500,
                            Title = "LG C2 OLED TV"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 16,
                            Description = "Comfortable men's jeans with a modern slim fit and a hint of stretch for easy movement.",
                            Price = 55,
                            Title = "Men's Slim Fit Jeans"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 17,
                            Description = "A light and breezy floral dress, perfect for warm weather and casual outings.",
                            Price = 45,
                            Title = "Women's Summer Dress"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 18,
                            Description = "A soft and comfortable hoodie suitable for everyone, ideal for everyday wear.",
                            Price = 35,
                            Title = "Unisex Hoodie"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 19,
                            Description = "Lightweight athletic shoes designed with a cushioned sole for comfort and performance during runs.",
                            Price = 80,
                            Title = "Running Shoes"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 20,
                            Description = "A classic leather wallet with multiple card slots and a dedicated compartment for cash, offering both style and durability.",
                            Price = 25,
                            Title = "Leather Wallet"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 21,
                            Description = "A classic science fiction novel by Frank Herbert, exploring a feudal interstellar society on a desert planet.",
                            Price = 20,
                            Title = "Dune"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 22,
                            Description = "A bestselling non-fiction book by James Clear, teaching how small, incremental changes can lead to remarkable results.",
                            Price = 18,
                            Title = "Atomic Habits"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 23,
                            Description = "The first volume of the critically acclaimed comic book series by Neil Gaiman, delving into the realm of dreams.",
                            Price = 15,
                            Title = "The Sandman Vol. 1"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 24,
                            Description = "A timeless and philosophical children's book by Antoine de Saint-Exupéry, a must-read for all ages.",
                            Price = 12,
                            Title = "The Little Prince"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 25,
                            Description = "A renowned book by Carl Sagan that simplifies and explores the wonders of the universe and its history.",
                            Price = 22,
                            Title = "Cosmos"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 27,
                            Description = "A Wi-Fi enabled refrigerator with a touchscreen display, allowing you to manage groceries and stay connected.",
                            Price = 2500,
                            Title = "Smart Refrigerator"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 28,
                            Description = "A powerful kitchen mixer for baking and cooking, with multiple attachments to handle various tasks.",
                            Price = 200,
                            Title = "Stand Mixer"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 29,
                            Description = "A luxurious duvet cover set made from soft, high-quality fabric, designed for king-size beds.",
                            Price = 80,
                            Title = "King Size Duvet Cover Set"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 30,
                            Description = "A stylish wall mirror with an ornate frame, perfect for adding light and elegance to any room.",
                            Price = 60,
                            Title = "Decorative Wall Mirror"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 31,
                            Description = "A versatile set of dumbbells that allows you to quickly change weights, saving space and money.",
                            Price = 150,
                            Title = "Adjustable Dumbbells"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 32,
                            Description = "A durable and waterproof two-person camping tent, perfect for hiking and outdoor adventures.",
                            Price = 90,
                            Title = "Camping Tent"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 33,
                            Description = "A standard-size basketball with a sturdy rubber surface, suitable for both indoor and outdoor play.",
                            Price = 25,
                            Title = "Basketball"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 34,
                            Description = "A rugged mountain bike with a lightweight frame, disk brakes, and smooth-shifting gears, perfect for off-road trails.",
                            Price = 450,
                            Title = "Mountain Bike"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 35,
                            Description = "A facial serum enriched with Vitamin C to brighten skin tone and reduce the appearance of dark spots.",
                            Price = 30,
                            Title = "Vitamin C Serum"
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 37,
                            Description = "A professional hair dryer with ionic technology for fast drying and frizz-free results.",
                            Price = 60,
                            Title = "Hair Dryer"
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 38,
                            Description = "An easy-to-use digital device for accurate and convenient blood pressure measurement at home.",
                            Price = 50,
                            Title = "Digital Blood Pressure Monitor"
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 39,
                            Description = "A collection of poseable action figures based on popular superhero characters, great for play and display.",
                            Price = 40,
                            Title = "Action Figure Set"
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 40,
                            Description = "A popular card game for adults, known for its humorous and often controversial content.",
                            Price = 20,
                            Title = "Cards Against Humanity"
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 41,
                            Description = "A 1000-piece jigsaw puzzle featuring a beautiful nature scene.",
                            Price = 15,
                            Title = "Jigsaw Puzzle"
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 43,
                            Description = "A mobile phone holder for car dashboards with a 360-degree rotating mount.",
                            Price = 20,
                            Title = "Car Phone Holder"
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 44,
                            Description = "A motorcycle helmet with an aerodynamic design and proper ventilation for safety and comfort.",
                            Price = 120,
                            Title = "Motorcycle Helmet"
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 46,
                            Description = "A durable dog leash with a comfortable handle.",
                            Price = 10,
                            Title = "Dog Leash"
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 47,
                            Description = "A scratching post for cats with an attached toy.",
                            Price = 30,
                            Title = "Cat Scratching Post"
                        });
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("TypeImage")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            ImageUrl = "/images/products/samsung_s23_ultra_1.jpg",
                            ProductId = 1,
                            Title = "Front View",
                            TypeImage = (byte)0
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            ImageUrl = "/images/products/samsung_s23_ultra_2.jpg",
                            ProductId = 1,
                            Title = "Back View",
                            TypeImage = (byte)1
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 3,
                            ImageUrl = "/images/products/samsung_s23_ultra_3.jpg",
                            ProductId = 1,
                            Title = "Side View",
                            TypeImage = (byte)2
                        });
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.ProductProductTag", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTagId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "ProductTagId");

                    b.HasIndex("ProductTagId");

                    b.ToTable("ProductsProductTags");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.ProductProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductProperties");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SecondTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.UserInformation", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserInformation");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Cart", b =>
                {
                    b.HasOne("MyMvcNetCore.Entities.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyMvcNetCore.Entities.Identity.ApplicationUser", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Category", b =>
                {
                    b.HasOne("MyMvcNetCore.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("MyMvcNetCore.Entities.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Identity.ApplicationUser", b =>
                {
                    b.HasOne("MyMvcNetCore.Entities.Company", "Company")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("MyMvcNetCore.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("MyMvcNetCore.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("MyMvcNetCore.Entities.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyMvcNetCore.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("MyMvcNetCore.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.OrderDetail", b =>
                {
                    b.HasOne("MyMvcNetCore.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyMvcNetCore.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Product", b =>
                {
                    b.HasOne("MyMvcNetCore.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.ProductImage", b =>
                {
                    b.HasOne("MyMvcNetCore.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.ProductProductTag", b =>
                {
                    b.HasOne("MyMvcNetCore.Entities.Product", "Product")
                        .WithMany("ProductProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyMvcNetCore.Entities.ProductTag", "ProductTag")
                        .WithMany("ProductProductTags")
                        .HasForeignKey("ProductTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductTag");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.ProductProperty", b =>
                {
                    b.HasOne("MyMvcNetCore.Entities.Product", "Product")
                        .WithMany("ProductProperties")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Slider", b =>
                {
                    b.HasOne("MyMvcNetCore.Entities.Product", "Product")
                        .WithMany("Sliders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.UserInformation", b =>
                {
                    b.HasOne("MyMvcNetCore.Entities.Identity.ApplicationUser", "User")
                        .WithOne("UserInformation")
                        .HasForeignKey("MyMvcNetCore.Entities.UserInformation", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Category", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Company", b =>
                {
                    b.Navigation("ApplicationUsers");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("UserInformation")
                        .IsRequired();
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductProductTags");

                    b.Navigation("ProductProperties");

                    b.Navigation("Sliders");
                });

            modelBuilder.Entity("MyMvcNetCore.Entities.ProductTag", b =>
                {
                    b.Navigation("ProductProductTags");
                });
#pragma warning restore 612, 618
        }
    }
}
